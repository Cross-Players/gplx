import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:gplx/core/constants/app_styles.dart';
import 'package:gplx/features/test/models/question.dart';
import 'package:gplx/features/test/providers/firestore_providers.dart';

class AddQuestionScreen extends ConsumerStatefulWidget {
  const AddQuestionScreen({super.key});

  @override
  ConsumerState<AddQuestionScreen> createState() => _AddQuestionScreenState();
}

class _AddQuestionScreenState extends ConsumerState<AddQuestionScreen> {
  final _formKey = GlobalKey<FormState>();
  final _questionTitleController = TextEditingController();
  final _imageUrlController = TextEditingController();

  final List<TextEditingController> _optionControllers = [
    TextEditingController(),
    TextEditingController(),
    TextEditingController(),
    TextEditingController(),
  ];

  int _correctOptionIndex = 0;
  bool _isLoading = false;
  String? _selectedQuizId;

  @override
  void dispose() {
    _questionTitleController.dispose();
    _imageUrlController.dispose();
    for (var controller in _optionControllers) {
      controller.dispose();
    }
    super.dispose();
  }

  void _addOption() {
    setState(() {
      _optionControllers.add(TextEditingController());
    });
  }

  void _removeOption(int index) {
    if (_optionControllers.length <= 2) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Cần ít nhất 2 lựa chọn')),
      );
      return;
    }

    setState(() {
      _optionControllers[index].dispose();
      _optionControllers.removeAt(index);

      // Adjust correct option index if needed
      if (_correctOptionIndex >= _optionControllers.length) {
        _correctOptionIndex = _optionControllers.length - 1;
      }
    });
  }

  Future<void> _submitForm() async {
    if (_formKey.currentState!.validate()) {
      // Validate quiz selection
      if (_selectedQuizId == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Vui lòng chọn một bài quiz')),
        );
        return;
      }

      setState(() {
        _isLoading = true;
      });

      try {
        // Get all options text
        final options = _optionControllers
            .map((controller) => controller.text.trim())
            .toList();

        // Create the question
        final question = Question(
          // id is null - will be auto-generated by Firestore
          questionTitle: _questionTitleController.text.trim(),
          options: options,
          correctOptionIndex: _correctOptionIndex,
          imageUrl: _imageUrlController.text.isEmpty
              ? null
              : _imageUrlController.text.trim(),
          quizId: _selectedQuizId,
        );

        // Save to Firestore
        await ref.read(questionsProvider.notifier).addQuestion(question);

        // Show success message
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Câu hỏi đã được lưu thành công')),
          );

          // Reset the form
          _formKey.currentState!.reset();
          _questionTitleController.clear();
          _imageUrlController.clear();
          for (var controller in _optionControllers) {
            controller.clear();
          }
          setState(() {
            _correctOptionIndex = 0;
            _selectedQuizId = null;
          });
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Lỗi: $e')),
          );
        }
      } finally {
        if (mounted) {
          setState(() {
            _isLoading = false;
          });
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final quizzesAsync = ref.watch(quizzesNotifierProvider);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Thêm câu hỏi mới'),
        backgroundColor: AppStyles.primaryColor,
        foregroundColor: Colors.white,
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              padding: const EdgeInsets.all(16),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Question Title
                    TextFormField(
                      controller: _questionTitleController,
                      decoration: InputDecoration(
                        labelText: 'Nội dung câu hỏi',
                        hintText: 'Nhập nội dung câu hỏi',
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                        filled: true,
                        fillColor: Colors.white,
                      ),
                      maxLines: 3,
                      validator: (value) {
                        if (value == null || value.trim().isEmpty) {
                          return 'Vui lòng nhập nội dung câu hỏi';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 16),

                    // Quiz ID Dropdown
                    quizzesAsync.when(
                      loading: () => const Center(
                        child: CircularProgressIndicator(),
                      ),
                      error: (error, stackTrace) => Text(
                        'Lỗi tải danh sách quiz: $error',
                        style: const TextStyle(color: Colors.red),
                      ),
                      data: (quizzes) {
                        if (quizzes.isEmpty) {
                          return const Text(
                            'Không có quiz nào. Vui lòng tạo quiz trước.',
                            style: TextStyle(fontStyle: FontStyle.italic),
                          );
                        }

                        return DropdownButtonFormField<String>(
                          value: _selectedQuizId,
                          decoration: InputDecoration(
                            labelText: 'Chọn Quiz',
                            border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                            filled: true,
                            fillColor: Colors.white,
                          ),
                          items: quizzes.map((quiz) {
                            return DropdownMenuItem<String>(
                              value: quiz.id,
                              child: Text(
                                'Quiz ${quiz.title} (${quiz.categoryID})',
                              ),
                            );
                          }).toList(),
                          onChanged: (value) {
                            setState(() {
                              _selectedQuizId = value;
                            });
                          },
                          validator: (value) {
                            if (value == null) {
                              return 'Vui lòng chọn một quiz';
                            }
                            return null;
                          },
                        );
                      },
                    ),
                    const SizedBox(height: 16),

                    // Image URL
                    TextFormField(
                      controller: _imageUrlController,
                      decoration: InputDecoration(
                        labelText: 'URL Hình ảnh (không bắt buộc)',
                        hintText: 'Nhập URL hình ảnh nếu có',
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                        filled: true,
                        fillColor: Colors.white,
                        prefixIcon: const Icon(Icons.image),
                      ),
                    ),
                    const SizedBox(height: 24),

                    // Options section
                    const Text(
                      'Các lựa chọn',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: AppStyles.primaryColor,
                      ),
                    ),
                    const SizedBox(height: 8),

                    // Options list
                    ...List.generate(_optionControllers.length, (index) {
                      return Padding(
                        padding: const EdgeInsets.only(bottom: 12),
                        child: Row(
                          children: [
                            // Radio button for correct answer
                            Radio<int>(
                              value: index,
                              groupValue: _correctOptionIndex,
                              activeColor: Colors.green,
                              onChanged: (int? value) {
                                if (value != null) {
                                  setState(() {
                                    _correctOptionIndex = value;
                                  });
                                }
                              },
                            ),

                            // Option text field
                            Expanded(
                              child: TextFormField(
                                controller: _optionControllers[index],
                                decoration: InputDecoration(
                                  labelText: 'Lựa chọn ${index + 1}',
                                  border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(8),
                                  ),
                                  filled: true,
                                  fillColor: _correctOptionIndex == index
                                      ? Colors.green[50]
                                      : Colors.white,
                                ),
                                validator: (value) {
                                  if (value == null || value.trim().isEmpty) {
                                    return 'Vui lòng nhập nội dung lựa chọn';
                                  }
                                  return null;
                                },
                              ),
                            ),

                            // Remove option button
                            IconButton(
                              icon: const Icon(Icons.delete, color: Colors.red),
                              onPressed: () => _removeOption(index),
                            ),
                          ],
                        ),
                      );
                    }),

                    // Add option button
                    Center(
                      child: TextButton.icon(
                        onPressed: _addOption,
                        icon: const Icon(Icons.add),
                        label: const Text('Thêm lựa chọn'),
                        style: TextButton.styleFrom(
                          foregroundColor: AppStyles.primaryColor,
                        ),
                      ),
                    ),
                    const SizedBox(height: 32),

                    // Submit button
                    SizedBox(
                      width: double.infinity,
                      height: 50,
                      child: ElevatedButton(
                        onPressed: _submitForm,
                        style: ElevatedButton.styleFrom(
                          backgroundColor: AppStyles.primaryColor,
                          foregroundColor: Colors.white,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                        child: const Text(
                          'Lưu câu hỏi',
                          style: TextStyle(fontSize: 16),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
    );
  }
}
